import pickWhen from './pickWhen';
import pickThenRename from './pickThenRename';

export { pickWhen, pickThenRename };

// Ramda 27
export { F } from 'ramda';
export { T } from 'ramda';
export { __ } from 'ramda';
export { add } from 'ramda';
export { addIndex } from 'ramda';
export { adjust } from 'ramda';
export { all } from 'ramda';
export { allPass } from 'ramda';
export { always } from 'ramda';
export { and } from 'ramda';
export { any } from 'ramda';
export { anyPass } from 'ramda';
export { ap } from 'ramda';
export { aperture } from 'ramda';
export { append } from 'ramda';
export { apply } from 'ramda';
export { applySpec } from 'ramda';
export { applyTo } from 'ramda';
export { ascend } from 'ramda';
export { assoc } from 'ramda';
export { assocPath } from 'ramda';
export { binary } from 'ramda';
export { bind } from 'ramda';
export { both } from 'ramda';
export { call } from 'ramda';
export { chain } from 'ramda';
export { clamp } from 'ramda';
export { clone } from 'ramda';
export { comparator } from 'ramda';
export { complement } from 'ramda';
export { compose } from 'ramda';
export { composeK } from 'ramda';
export { composeP } from 'ramda';
export { composeWith } from 'ramda';
export { concat } from 'ramda';
export { cond } from 'ramda';
export { construct } from 'ramda';
export { constructN } from 'ramda';
export { contains } from 'ramda';
export { converge } from 'ramda';
export { countBy } from 'ramda';
export { curry } from 'ramda';
export { curryN } from 'ramda';
export { dec } from 'ramda';
export { defaultTo } from 'ramda';
export { descend } from 'ramda';
export { difference } from 'ramda';
export { differenceWith } from 'ramda';
export { dissoc } from 'ramda';
export { dissocPath } from 'ramda';
export { divide } from 'ramda';
export { drop } from 'ramda';
export { dropLast } from 'ramda';
export { dropLastWhile } from 'ramda';
export { dropRepeats } from 'ramda';
export { dropRepeatsWith } from 'ramda';
export { dropWhile } from 'ramda';
export { either } from 'ramda';
export { empty } from 'ramda';
export { endsWith } from 'ramda';
export { eqBy } from 'ramda';
export { eqProps } from 'ramda';
export { equals } from 'ramda';
export { evolve } from 'ramda';
export { filter } from 'ramda';
export { find } from 'ramda';
export { findIndex } from 'ramda';
export { findLast } from 'ramda';
export { findLastIndex } from 'ramda';
export { flatten } from 'ramda';
export { flip } from 'ramda';
export { forEach } from 'ramda';
export { forEachObjIndexed } from 'ramda';
export { fromPairs } from 'ramda';
export { groupBy } from 'ramda';
export { groupWith } from 'ramda';
export { gt } from 'ramda';
export { gte } from 'ramda';
export { has } from 'ramda';
export { hasIn } from 'ramda';
export { hasPath } from 'ramda';
export { head } from 'ramda';
export { identical } from 'ramda';
export { identity } from 'ramda';
export { ifElse } from 'ramda';
export { inc } from 'ramda';
export { includes } from 'ramda';
export { indexBy } from 'ramda';
export { indexOf } from 'ramda';
export { init } from 'ramda';
export { innerJoin } from 'ramda';
export { insert } from 'ramda';
export { insertAll } from 'ramda';
export { intersection } from 'ramda';
export { intersperse } from 'ramda';
export { into } from 'ramda';
export { invert } from 'ramda';
export { invertObj } from 'ramda';
export { invoker } from 'ramda';
export { is } from 'ramda';
export { isEmpty } from 'ramda';
export { isNil } from 'ramda';
export { join } from 'ramda';
export { juxt } from 'ramda';
export { keys } from 'ramda';
export { keysIn } from 'ramda';
export { last } from 'ramda';
export { lastIndexOf } from 'ramda';
export { length } from 'ramda';
export { lens } from 'ramda';
export { lensIndex } from 'ramda';
export { lensPath } from 'ramda';
export { lensProp } from 'ramda';
export { lift } from 'ramda';
export { liftN } from 'ramda';
export { lt } from 'ramda';
export { lte } from 'ramda';
export { map } from 'ramda';
export { mapAccum } from 'ramda';
export { mapAccumRight } from 'ramda';
export { mapObjIndexed } from 'ramda';
export { match } from 'ramda';
export { mathMod } from 'ramda';
export { max } from 'ramda';
export { maxBy } from 'ramda';
export { mean } from 'ramda';
export { median } from 'ramda';
export { memoizeWith } from 'ramda';
export { merge } from 'ramda';
export { mergeAll } from 'ramda';
export { mergeDeepLeft } from 'ramda';
export { mergeDeepRight } from 'ramda';
export { mergeDeepWith } from 'ramda';
export { mergeDeepWithKey } from 'ramda';
export { mergeLeft } from 'ramda';
export { mergeRight } from 'ramda';
export { mergeWith } from 'ramda';
export { mergeWithKey } from 'ramda';
export { min } from 'ramda';
export { minBy } from 'ramda';
export { modulo } from 'ramda';
export { move } from 'ramda';
export { multiply } from 'ramda';
export { nAry } from 'ramda';
export { negate } from 'ramda';
export { none } from 'ramda';
export { not } from 'ramda';
export { nth } from 'ramda';
export { nthArg } from 'ramda';
export { o } from 'ramda';
export { objOf } from 'ramda';
export { of } from 'ramda';
export { omit } from 'ramda';
export { once } from 'ramda';
export { or } from 'ramda';
export { otherwise } from 'ramda';
export { over } from 'ramda';
export { pair } from 'ramda';
export { partial } from 'ramda';
export { partialRight } from 'ramda';
export { partition } from 'ramda';
export { path } from 'ramda';
export { paths } from 'ramda';
export { pathEq } from 'ramda';
export { pathOr } from 'ramda';
export { pathSatisfies } from 'ramda';
export { pick } from 'ramda';
export { pickAll } from 'ramda';
export { pickBy } from 'ramda';
export { pipe } from 'ramda';
export { pipeK } from 'ramda';
export { pipeP } from 'ramda';
export { pipeWith } from 'ramda';
export { pluck } from 'ramda';
export { prepend } from 'ramda';
export { product } from 'ramda';
export { project } from 'ramda';
export { prop } from 'ramda';
export { propEq } from 'ramda';
export { propIs } from 'ramda';
export { propOr } from 'ramda';
export { propSatisfies } from 'ramda';
export { props } from 'ramda';
export { range } from 'ramda';
export { reduce } from 'ramda';
export { reduceBy } from 'ramda';
export { reduceRight } from 'ramda';
export { reduceWhile } from 'ramda';
export { reduced } from 'ramda';
export { reject } from 'ramda';
export { remove } from 'ramda';
export { repeat } from 'ramda';
export { replace } from 'ramda';
export { reverse } from 'ramda';
export { scan } from 'ramda';
export { sequence } from 'ramda';
export { set } from 'ramda';
export { slice } from 'ramda';
export { sort } from 'ramda';
export { sortBy } from 'ramda';
export { sortWith } from 'ramda';
export { split } from 'ramda';
export { splitAt } from 'ramda';
export { splitEvery } from 'ramda';
export { splitWhen } from 'ramda';
export { startsWith } from 'ramda';
export { subtract } from 'ramda';
export { sum } from 'ramda';
export { symmetricDifference } from 'ramda';
export { symmetricDifferenceWith } from 'ramda';
export { tail } from 'ramda';
export { take } from 'ramda';
export { takeLast } from 'ramda';
export { takeLastWhile } from 'ramda';
export { takeWhile } from 'ramda';
export { tap } from 'ramda';
export { test } from 'ramda';
export { andThen } from 'ramda';
export { times } from 'ramda';
export { toLower } from 'ramda';
export { toPairs } from 'ramda';
export { toPairsIn } from 'ramda';
export { toString } from 'ramda';
export { toUpper } from 'ramda';
export { transduce } from 'ramda';
export { transpose } from 'ramda';
export { traverse } from 'ramda';
export { trim } from 'ramda';
export { tryCatch } from 'ramda';
export { type } from 'ramda';
export { unapply } from 'ramda';
export { unary } from 'ramda';
export { uncurryN } from 'ramda';
export { unfold } from 'ramda';
export { union } from 'ramda';
export { unionWith } from 'ramda';
export { uniq } from 'ramda';
export { uniqBy } from 'ramda';
export { uniqWith } from 'ramda';
export { unless } from 'ramda';
export { unnest } from 'ramda';
export { until } from 'ramda';
export { update } from 'ramda';
export { useWith } from 'ramda';
export { values } from 'ramda';
export { valuesIn } from 'ramda';
export { view } from 'ramda';
export { when } from 'ramda';
export { where } from 'ramda';
export { whereEq } from 'ramda';
export { without } from 'ramda';
export { xor } from 'ramda';
export { xprod } from 'ramda';
export { zip } from 'ramda';
export { zipObj } from 'ramda';
export { zipWith } from 'ramda';
export { thunkify } from 'ramda';

// Ramda Adjunct
// Type
export { isNotUndefined } from 'ramda-adjunct';
export { isUndefined } from 'ramda-adjunct';
export { isNull } from 'ramda-adjunct';
export { isNotNull } from 'ramda-adjunct';
export { isNotNil } from 'ramda-adjunct';
export { isArray } from 'ramda-adjunct';
export { isIterable } from 'ramda-adjunct';
export { isEmptyArray } from 'ramda-adjunct';
export { isNotArray } from 'ramda-adjunct';
export { isNonEmptyArray } from 'ramda-adjunct';
export { isBoolean } from 'ramda-adjunct';
export { isNotBoolean } from 'ramda-adjunct';
export { isNilOrEmpty } from 'ramda-adjunct';
export { isString } from 'ramda-adjunct';
export { isEmptyString } from 'ramda-adjunct';
export { isNotString } from 'ramda-adjunct';
export { isNonEmptyString } from 'ramda-adjunct';
export { isArrayLike } from 'ramda-adjunct';
export { isNotArrayLike } from 'ramda-adjunct';
export { isGeneratorFunction } from 'ramda-adjunct';
export { isNotGeneratorFunction } from 'ramda-adjunct';
export { isAsyncFunction } from 'ramda-adjunct';
export { isNotAsyncFunction } from 'ramda-adjunct';
export { isFunction } from 'ramda-adjunct';
export { isNotFunction } from 'ramda-adjunct';
export { isObj } from 'ramda-adjunct';
export { isObject } from 'ramda-adjunct'; // alias of isObject
export { isNotObj } from 'ramda-adjunct';
export { isNotObject } from 'ramda-adjunct'; // alias of isNotObj
export { isObjLike } from 'ramda-adjunct';
export { isObjectLike } from 'ramda-adjunct'; // alias of isObjLike
export { isNotObjLike } from 'ramda-adjunct';
export { isNotObjectLike } from 'ramda-adjunct'; // alias of isNotObjLike
export { isPlainObj } from 'ramda-adjunct';
export { isPlainObject } from 'ramda-adjunct';
export { isNotPlainObj } from 'ramda-adjunct';
export { isNotPlainObject } from 'ramda-adjunct'; // alias of isNotPlainObject
export { isDate } from 'ramda-adjunct';
export { isNotDate } from 'ramda-adjunct';
export { isValidDate } from 'ramda-adjunct';
export { isNotValidDate } from 'ramda-adjunct';
export { isInvalidDate } from 'ramda-adjunct'; // alias of isNotValidDate
export { isNumber } from 'ramda-adjunct';
export { isNotNumber } from 'ramda-adjunct';
export { isPositive } from 'ramda-adjunct';
export { isNegative } from 'ramda-adjunct';
export { isPositiveZero } from 'ramda-adjunct';
export { isNegativeZero } from 'ramda-adjunct';
export { isNotNilOrEmpty } from 'ramda-adjunct';
export { isNonPositive } from 'ramda-adjunct';
export { isNonNegative } from 'ramda-adjunct';
export { isMap } from 'ramda-adjunct';
export { isNaN } from 'ramda-adjunct';
export { isNotNaN } from 'ramda-adjunct';
export { isFinite } from 'ramda-adjunct';
export { isNotFinite } from 'ramda-adjunct';
export { isInteger } from 'ramda-adjunct';
export { isNotInteger } from 'ramda-adjunct';
export { isFloat } from 'ramda-adjunct';
export { isNotFloat } from 'ramda-adjunct';
export { isValidNumber } from 'ramda-adjunct';
export { isNotValidNumber } from 'ramda-adjunct';
export { isOdd } from 'ramda-adjunct';
export { isEven } from 'ramda-adjunct';
export { isPair } from 'ramda-adjunct';
export { isNotPair } from 'ramda-adjunct';
export { isThenable } from 'ramda-adjunct';
export { isPromise } from 'ramda-adjunct';
export { isTrue } from 'ramda-adjunct';
export { isFalse } from 'ramda-adjunct';
export { isTruthy } from 'ramda-adjunct';
export { isFalsy } from 'ramda-adjunct';
export { isRegExp } from 'ramda-adjunct';
export { isNotRegExp } from 'ramda-adjunct';
export { isSet } from 'ramda-adjunct';
export { isSparseArray } from 'ramda-adjunct';
export { isSymbol } from 'ramda-adjunct';
export { isSafeInteger } from 'ramda-adjunct';
export { isIndexed } from 'ramda-adjunct';
// Function
export { stubUndefined } from 'ramda-adjunct';
export { stubNull } from 'ramda-adjunct';
export { stubObj } from 'ramda-adjunct';
export { stubObject } from 'ramda-adjunct';
export { stubString } from 'ramda-adjunct';
export { stubArray } from 'ramda-adjunct';
export { noop } from 'ramda-adjunct';
export { liftFN } from 'ramda-adjunct';
export { liftF } from 'ramda-adjunct';
export { cata } from 'ramda-adjunct';
export { weave } from 'ramda-adjunct';
export { weaveLazy } from 'ramda-adjunct';
export { curryRightN } from 'ramda-adjunct';
export { curryRight } from 'ramda-adjunct';
export { allP } from 'ramda-adjunct';
export { noneP } from 'ramda-adjunct';
export { resolveP } from 'ramda-adjunct';
export { rejectP } from 'ramda-adjunct';
export { delayP } from 'ramda-adjunct';
export { thenP } from 'ramda-adjunct';
export { then } from 'ramda-adjunct';
export { allSettledP } from 'ramda-adjunct';
export { Y } from 'ramda-adjunct';
export { seq } from 'ramda-adjunct';
export { sequencing } from 'ramda-adjunct';
export { dispatch } from 'ramda-adjunct';
export { async } from 'ramda-adjunct';
export { anyP } from 'ramda-adjunct';
export { firstP } from 'ramda-adjunct'; // alias of anyP
export { lastP } from 'ramda-adjunct';
export { fnull } from 'ramda-adjunct';
// List
export { mapIndexed } from 'ramda-adjunct';
export { reduceIndexed } from 'ramda-adjunct';
export { pickIndexes } from 'ramda-adjunct';
export { list } from 'ramda-adjunct';
export { ensureArray } from 'ramda-adjunct';
export { concatAll } from 'ramda-adjunct';
export { concatRight } from 'ramda-adjunct';
export { reduceP } from 'ramda-adjunct';
export { reduceRightP } from 'ramda-adjunct';
export { sliceFrom } from 'ramda-adjunct';
export { sliceTo } from 'ramda-adjunct';
export { omitIndexes } from 'ramda-adjunct';
export { compact } from 'ramda-adjunct';
export { appendFlipped } from 'ramda-adjunct';
export { contained } from 'ramda-adjunct';
export { included } from 'ramda-adjunct';

export { lengthGt } from 'ramda-adjunct';
export { lengthLt } from 'ramda-adjunct';
export { lengthGte } from 'ramda-adjunct';
export { lengthLte } from 'ramda-adjunct';
export { lengthEq } from 'ramda-adjunct';
export { lengthNotEq } from 'ramda-adjunct';
export { allEqual } from 'ramda-adjunct';
export { repeatStr } from 'ramda-adjunct';
export { allIdentical } from 'ramda-adjunct';
export { allIdenticalTo } from 'ramda-adjunct';
export { allEqualTo } from 'ramda-adjunct';
export { flattenDepth } from 'ramda-adjunct';
export { toArray } from 'ramda-adjunct';
export { allUnique } from 'ramda-adjunct';
export { notAllUnique } from 'ramda-adjunct';
export { sortByProps } from 'ramda-adjunct';
export { skipTake } from 'ramda-adjunct';
// Object
export { renameKeys } from 'ramda-adjunct';
export { renameKeysWith } from 'ramda-adjunct';
export { resetToDefault } from 'ramda-adjunct';
export { mergeProps } from 'ramda-adjunct';
export { mergePaths } from 'ramda-adjunct';
export { mergeProp } from 'ramda-adjunct';
export { mergePath } from 'ramda-adjunct';
export { omitBy } from 'ramda-adjunct';
export { pathOrLazy } from 'ramda-adjunct';
export { viewOr } from 'ramda-adjunct';
export { spreadProp } from 'ramda-adjunct';
export { spreadPath } from 'ramda-adjunct';
export { flattenProp } from 'ramda-adjunct';
export { flattenPath } from 'ramda-adjunct';
export { unzipObjWith } from 'ramda-adjunct';
export { zipObjWith } from 'ramda-adjunct';
// Relation
export { lensEq } from 'ramda-adjunct';
export { lensNotEq } from 'ramda-adjunct';
export { lensSatisfies } from 'ramda-adjunct';
export { lensNotSatisfy } from 'ramda-adjunct';
export { lensTraverse } from 'ramda-adjunct';
export { lensIso } from 'ramda-adjunct';
export { propNotEq } from 'ramda-adjunct';
export { pathNotEq } from 'ramda-adjunct';
export { inRange } from 'ramda-adjunct';
// Logic
export { isNotEmpty } from 'ramda-adjunct';
export { defaultWhen } from 'ramda-adjunct';
export { notBoth } from 'ramda-adjunct';
export { nand } from 'ramda-adjunct';
export { neither } from 'ramda-adjunct';
export { nor } from 'ramda-adjunct';
export { notAllPass } from 'ramda-adjunct';
export { nonePass } from 'ramda-adjunct';
export { argsPass } from 'ramda-adjunct';
export { dropArgs } from 'ramda-adjunct';
// Math
export { round } from 'ramda-adjunct';
export { ceil } from 'ramda-adjunct';
export { divideNum } from 'ramda-adjunct';
export { floor } from 'ramda-adjunct';
export { trunc } from 'ramda-adjunct';
export { sign } from 'ramda-adjunct';
export { subtractNum } from 'ramda-adjunct';
// String
export { replaceAll } from 'ramda-adjunct';
export { escapeRegExp } from 'ramda-adjunct';
export { trimStart } from 'ramda-adjunct';
export { trimLeft } from 'ramda-adjunct'; // alias of trimStart
export { trimEnd } from 'ramda-adjunct';
export { trimRight } from 'ramda-adjunct'; // alias of trimEnd
export { trimCharsEnd } from 'ramda-adjunct';
export { trimCharsStart } from 'ramda-adjunct';
export { padCharsStart } from 'ramda-adjunct';
export { padCharsEnd } from 'ramda-adjunct';
export { padEnd } from 'ramda-adjunct';
export { padStart } from 'ramda-adjunct';
// Types
export { Identity } from 'ramda-adjunct';

/* Prefer R over RA */
// export { paths } from 'ramda-adjunct'
// export { mergeRight } from 'ramda-adjunct'
// export { mergeLeft } from 'ramda-adjunct'
// export { hasPath } from 'ramda-adjunct'
// export { move } from 'ramda-adjunct'
