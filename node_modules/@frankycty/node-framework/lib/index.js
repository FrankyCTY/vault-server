"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DataValidator", {
  enumerable: true,
  get: function get() {
    return _dataValidator.default;
  }
});
exports.Server = void 0;

var _koa = _interopRequireDefault(require("koa"));

var _boom = _interopRequireDefault(require("@hapi/boom"));

var _utils = require("./utils");

var _koaMount = _interopRequireDefault(require("koa-mount"));

var _koaStatic = _interopRequireDefault(require("koa-static"));

var _rmExtra = require("@frankycty/rm-extra");

var _dataValidator = _interopRequireDefault(require("./dataValidator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Server = {
  start() {
    var _arguments = arguments;
    return _asyncToGenerator(function* () {
      var routes = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {};
      var staticPaths = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : [];
      var {
        port
      } = _arguments.length > 2 ? _arguments[2] : undefined;
      var app = new _koa.default(); // Set up query string parsing

      (0, _utils.useQueryParser)(app); // Load static paths

      (0, _rmExtra.forEach)(_ref => {
        var {
          route: staticRoute,
          path: staticPath
        } = _ref;
        app.use((0, _koaMount.default)(staticRoute, (0, _koaStatic.default)(staticPath)));
      }, staticPaths); // build routers

      var routers = (0, _utils.buildRouters)(routes); // connect routes to app

      (0, _rmExtra.forEach)(router => {
        app.use(router.routes());
        app.use(router.allowedMethods({
          throw: true,
          notImplemented: () => _boom.default.notImplemented(),
          methodNotAllowed: () => _boom.default.methodNotAllowed()
        }));
      }, routers);
      app.listen(port || 8080, () => {
        console.log("server started on localhost: ".concat(port || 8080));
      });
      return app;
    })();
  }

};
exports.Server = Server;