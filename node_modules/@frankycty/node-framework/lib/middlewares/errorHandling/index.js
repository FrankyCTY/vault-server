"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ramdaExtra = require("@soltalabs/ramda-extra");

var _handleNotFound = _interopRequireDefault(require("./handleNotFound"));

var _handleOtherErrors = _interopRequireDefault(require("./handleOtherErrors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var defaultOpts = {
  badRequestErrors: ["ValidationError"]
};

var _default = opts => {
  var middlewareOpts = (0, _ramdaExtra.merge)(defaultOpts, opts);
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (ctx, next) {
      try {
        yield next();

        if (ctx.status === 404) {
          (0, _handleNotFound.default)(ctx);
        }
      } catch (err) {
        (0, _handleOtherErrors.default)(err, ctx, middlewareOpts);
      }
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};

exports.default = _default;