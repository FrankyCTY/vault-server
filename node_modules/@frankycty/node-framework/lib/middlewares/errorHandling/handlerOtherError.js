"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _boom = require("@hapi/boom");

var _ramdaExtra = require("@soltalabs/ramda-extra");

var _helpers = require("./helpers");

var errorLog = function errorLog() {
  var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var err = arguments.length > 1 ? arguments[1] : undefined;

  if ((0, _ramdaExtra.isFunction)(logger.error)) {
    logger.error(err);
  }
};

var debugLog = function debugLog() {
  var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var err = arguments.length > 1 ? arguments[1] : undefined;

  if ((0, _ramdaExtra.isFunction)(logger.debug)) {
    logger.debug(err);
  }
};

var _default = (err, ctx, _ref) => {
  var {
    logger = {},
    badRequestErrors
  } = _ref;
  var statusCode = (0, _helpers.getHttpStatusFromError)(err, badRequestErrors);

  if (err.name === "UnauthorizedError") {
    debugLog(logger, err);
    ctx.status = 401;
    ctx.body = (0, _helpers.getErrorResponse)((0, _boom.unauthorized)("InvalidAuthToken: ".concat(err.message)));
    return;
  }

  if (statusCode > 499) {
    errorLog(logger, err);
  }

  if (!(0, _boom.isBoom)(err)) {
    (0, _boom.boomify)(err, {
      statusCode
    });
  }

  debugLog(logger, err);
  ctx.status = statusCode;
  ctx.body = (0, _helpers.getErrorResponse)(err);
};

exports.default = _default;